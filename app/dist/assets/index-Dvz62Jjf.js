var Ht=Object.defineProperty;var Ut=(n,e,t)=>e in n?Ht(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var Se=(n,e,t)=>(Ut(n,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))o(l);new MutationObserver(l=>{for(const r of l)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function t(l){const r={};return l.integrity&&(r.integrity=l.integrity),l.referrerPolicy&&(r.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?r.credentials="include":l.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(l){if(l.ep)return;l.ep=!0;const r=t(l);fetch(l.href,r)}})();var Ve=(n=>(n[n.SECOND=1e3]="SECOND",n[n.MINUTE=6e4]="MINUTE",n[n.HALF_HOUR=18e5]="HALF_HOUR",n[n.HOUR=36e5]="HOUR",n[n.DAY=864e5]="DAY",n[n.WEEK=6048e5]="WEEK",n[n.MONTH=2592e6]="MONTH",n))(Ve||{});class we{static set(e,t,o,l){const r=new Date;r.setTime(r.getTime()+o*l);const i=`expires=${r.toUTCString()}`;document.cookie=`${e}=${t};${i};path=/`}static get(e){const t=`${e}=`,o=document.cookie.split(";");for(let l=0;l<o.length;l++){let r=o[l];for(;r.charAt(0)===" ";)r=r.substring(1,r.length);if(r.indexOf(t)===0)return r.substring(t.length,r.length)}return null}static remove(e){document.cookie=`${e}=; Max-Age=-99999999;`}}function ie(n){return{ok:!0,value:n}}function J(n){return{ok:!1,error:n}}var W=(n=>(n.rs3="rs3",n.osrs="osrs",n))(W||{}),ue=(n=>(n.official="Official",n.runelite="RuneLite",n.hdos="HDOS",n))(ue||{});const tt={rs3:["Official"],osrs:["Official","RuneLite","HDOS"]};class Ue{static parseTokenResponse(e){try{const t=JSON.parse(e),o=t.id_token.split(".");if(o.length!==3){const i=`Malformed id_token: ${o.length} sections, expected 3`;return J(i)}const l=JSON.parse(atob(o[0]));if(l.typ!=="JWT"){const i=`Bad id_token header: typ ${l.typ}, expected JWT`;return J(i)}const r=JSON.parse(atob(o[1]));return ie({access_token:t.access_token,id_token:t.id_token,refresh_token:t.refresh_token,sub:r.sub,expiry:Date.now()+t.expires_in*1e3})}catch{return J("Unable to parse token response")}}static parseSessionResponse(e){try{const t=JSON.parse(e);return t.sessionId?ie(t.sessionId):J("sessionId does not exist on parsed object")}catch{return J("Unable to parse session response")}}static decodeBolt(e){const t={};for(const o in e){const l=o,r=e[l];typeof r=="string"?t[l]=atob(r):Array.isArray(r)&&r.every(i=>typeof i=="string")?t[l]=r.map(i=>atob(i)):t[l]=r}return t}}var Ce=(n=>(n.Windows="windows",n.Linux="linux",n.MacOS="mac",n))(Ce||{});const L={env:Ue.decodeBolt(s()),internalUrl:"https://bolt-internal",platform:null,rs3DebInstalledHash:null,rs3ExeInstalledHash:null,rs3AppInstalledHash:null,osrsExeInstalledHash:null,osrsAppInstalledHash:null,runeLiteInstalledId:null,hdosInstalledVersion:null,isFlathub:!1,hasBoltPlugins:!1,pluginList:{}};class Xe{static async makeLoginUrl(e){const t=new TextEncoder().encode(e.pkceCodeVerifier),o=await crypto.subtle.digest("SHA-256",t);let l="";const r=new Uint8Array(o);for(let c=0;c<r.byteLength;c++)l+=String.fromCharCode(r[c]);const i=btoa(l).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"");return e.origin.concat("/oauth2/auth?").concat(new URLSearchParams({auth_method:e.authMethod,login_type:e.loginType,flow:e.flow,response_type:"code",client_id:e.clientid,redirect_uri:e.redirect,code_challenge:i,code_challenge_method:"S256",prompt:"login",scope:"openid offline gamesso.token.create user.profile.read",state:e.pkceState}).toString())}static makeRandomVerifier(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=new Uint32Array(43);return crypto.getRandomValues(t),Array.from(t,function(o){return e[o%e.length]}).join("")}static makeRandomState(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",o=t.length-1,l=crypto.getRandomValues(new Uint8Array(12));return Array.from(l).map(r=>Math.round(r*(o-0)/255+0)).map(r=>t[r]).join("")}}const ye=class ye{static async openLoginWindow(e,t,o){if(ye.pendingLoginWindow!==null)return ye.pendingLoginWindow.window.focus();const l=Xe.makeRandomState(),r=Xe.makeRandomVerifier(),i=new TextEncoder().encode(r),c=await crypto.subtle.digest("SHA-256",i);let u="";const a=new Uint8Array(c);for(let _=0;_<a.byteLength;_++)u+=String.fromCharCode(a[_]);const d=btoa(u).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""),f=new URLSearchParams({auth_method:"",login_type:"",flow:"launcher",response_type:"code",client_id:o,redirect_uri:t,code_challenge:d,code_challenge_method:"S256",prompt:"login",scope:"openid offline gamesso.token.create user.profile.read",state:l}),g=`${e}/oauth2/auth?${f.toString()}`;we.set("auth_verifier",r,10,Ve.MINUTE),ye.pendingLoginWindow=window.open(g,"","width=480,height=720")}static navigateToAuthConsent(e,t,o){const l=Xe.makeRandomState(),r=new URLSearchParams({id_token_hint:t,nonce:o,prompt:"consent",redirect_uri:"http://localhost",response_type:"id_token code",state:l,client_id:"1fddee4e-b100-4f4e-b2b0-097f9088f9d2",scope:"openid offline"}),i=`${e}/oauth2/auth?${r.toString()}`;we.set("auth_nonce",o,10,Ve.MINUTE),window.location.href=i}static async refreshOAuthToken(e){return new Promise(t=>{if(e.expiry-Date.now()<3e4){const o=new URLSearchParams({grant_type:"refresh_token",client_id:L.env.clientid,refresh_token:e.refresh_token}),l=new XMLHttpRequest;l.onreadystatechange=()=>{if(l.readyState==4)if(l.status==200){const i=Ue.parseTokenResponse(l.response);i.ok?t(ie(i.value)):t(J(0))}else t(J(l.status))},l.onerror=()=>{t(J(0))};const r=L.env.origin.concat("/oauth2/token");l.open("POST",r,!0),l.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),l.setRequestHeader("Accept","application/json"),l.send(o)}else t(ie(e))})}static async getOAuthToken(e,t,o,l,r){const i=`${e}/oauth2/token`;return new Promise(c=>{const u=new XMLHttpRequest;u.onreadystatechange=()=>{if(u.readyState==4)if(u.status==200){const d=Ue.parseTokenResponse(u.response);return d.ok?c(ie(d.value)):c(J(d.error))}else return c(J(`Error: from ${i}: ${u.status}: ${u.response}`))},u.open("POST",i,!0),u.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),u.setRequestHeader("Accept","application/json");const a=new URLSearchParams({grant_type:"authorization_code",client_id:t,code:r,code_verifier:o,redirect_uri:l});u.send(a)})}static revokeOauthCreds(e){const t=`${L.env.origin}/oauth2/revoke`;return new Promise(o=>{const l=new XMLHttpRequest;l.open("POST",t,!0),l.onreadystatechange=()=>{l.readyState==4&&o(l.status)},l.setRequestHeader("Content-Type","application/x-www-form-urlencoded");const r=new URLSearchParams({token:e,client_id:L.env.clientid});l.send(r)})}static async getSessionId(e,t){const o=`${e}/sessions`;return new Promise(l=>{const r=new XMLHttpRequest;r.onreadystatechange=()=>{if(r.readyState==4)if(r.status==200){const c=Ue.parseSessionResponse(r.response);return c.ok?l(ie(c.value)):l(J(c.error))}else J(`Error: from ${o}: ${r.status}: ${r.response}`)},r.open("POST",o,!0),r.setRequestHeader("Content-Type","application/json"),r.setRequestHeader("Accept","application/json");const i={idToken:t};r.send(JSON.stringify(i))})}static validateIdToken(e,t){const o=e.split(".");if(o.length!==3)return J(`Malformed id_token: ${o.length} sections, expected 3`);const l=JSON.parse(atob(o[0]));return l.typ!=="JWT"?J(`Bad id_token header: typ ${l.typ}, expected JWT`):JSON.parse(atob(o[1])).nonce!==t?J("Incorrect nonce in id_token"):ie(void 0)}};Se(ye,"pendingLoginWindow",null);let ne=ye;class Re{static async buildSession(e,t){const o=await Re.getUser(e.sub,e.access_token);if(!o.ok)return J(`Failed to fetch user. Status: ${o.error}`);const l=await Re.getUserAccounts(t);return l.ok?ie({user:o.value,accounts:l.value,tokens:e,session_id:t}):J(`Failed to fetch game accounts. Status: ${l.error}`)}static getUser(e,t){return new Promise(o=>{const l=`${L.env.api}/users/${e}/displayName`,r=new XMLHttpRequest;r.onreadystatechange=()=>{if(r.readyState==4)if(r.status==200){const i=JSON.parse(r.response);o(ie(i))}else o(J(r.status))},r.open("GET",l,!0),r.setRequestHeader("Authorization","Bearer ".concat(t)),r.send()})}static getUserAccounts(e){const t=`${L.env.auth_api}/accounts`;return new Promise(o=>{const l=new XMLHttpRequest;l.onreadystatechange=async()=>{if(l.readyState==4)if(l.status==200){const r=JSON.parse(l.response);o(ie(r))}else o(J(l.status))},l.open("GET",t,!0),l.setRequestHeader("Accept","application/json"),l.setRequestHeader("Authorization","Bearer ".concat(e)),l.send()})}}function H(){}function Et(n,e){for(const t in e)n[t]=e[t];return n}function Nt(n){return!!n&&(typeof n=="object"||typeof n=="function")&&typeof n.then=="function"}function Lt(n){return n()}function nt(){return Object.create(null)}function ee(n){n.forEach(Lt)}function Ae(n){return typeof n=="function"}function Y(n,e){return n!=n?e==e:n!==e||n&&typeof n=="object"||typeof n=="function"}let He;function Mt(n,e){return n===e?!0:(He||(He=document.createElement("a")),He.href=e,n===He.href)}function jt(n){return Object.keys(n).length===0}function Ct(n,...e){if(n==null){for(const o of e)o(void 0);return H}const t=n.subscribe(...e);return t.unsubscribe?()=>t.unsubscribe():t}function se(n){let e;return Ct(n,t=>e=t)(),e}function le(n,e,t){n.$$.on_destroy.push(Ct(e,t))}function qe(n,e,t,o){if(n){const l=Rt(n,e,t,o);return n[0](l)}}function Rt(n,e,t,o){return n[1]&&o?Et(t.ctx.slice(),n[1](o(e))):t.ctx}function De(n,e,t,o){if(n[2]&&o){const l=n[2](o(t));if(e.dirty===void 0)return l;if(typeof l=="object"){const r=[],i=Math.max(e.dirty.length,l.length);for(let c=0;c<i;c+=1)r[c]=e.dirty[c]|l[c];return r}return e.dirty|l}return e.dirty}function Be(n,e,t,o,l,r){if(l){const i=Rt(e,t,o,r);n.p(i,l)}}function Ge(n){if(n.ctx.length>32){const e=[],t=n.ctx.length/32;for(let o=0;o<t;o++)e[o]=-1;return e}return-1}function Ee(n,e,t){return n.set(t),e}function At(n){return n&&Ae(n.destroy)?n.destroy:H}function k(n,e){n.appendChild(e)}function S(n,e,t){n.insertBefore(e,t||null)}function $(n){n.parentNode&&n.parentNode.removeChild(n)}function Pe(n,e){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(e)}function m(n){return document.createElement(n)}function B(n){return document.createTextNode(n)}function P(){return B(" ")}function fe(){return B("")}function E(n,e,t,o){return n.addEventListener(e,t,o),()=>n.removeEventListener(e,t,o)}function qt(n){return function(e){e.target===this&&n.call(this,e)}}function h(n,e,t){t==null?n.removeAttribute(e):n.getAttribute(e)!==t&&n.setAttribute(e,t)}function Dt(n){return Array.from(n.childNodes)}function re(n,e){e=""+e,n.data!==e&&(n.data=e)}function te(n,e){n.value=e??""}function de(n,e,t){for(let o=0;o<n.options.length;o+=1){const l=n.options[o];if(l.__value===e){l.selected=!0;return}}(!t||e!==void 0)&&(n.selectedIndex=-1)}function Me(n){const e=n.querySelector(":checked");return e&&e.__value}function F(n,e,t){n.classList.toggle(e,!!t)}function Bt(n,e,{bubbles:t=!1,cancelable:o=!1}={}){return new CustomEvent(n,{detail:e,bubbles:t,cancelable:o})}let Te;function ae(n){Te=n}function Je(){if(!Te)throw new Error("Function called outside component initialization");return Te}function Tt(n){Je().$$.on_mount.push(n)}function xt(n){Je().$$.on_destroy.push(n)}function Gt(){const n=Je();return(e,t,{cancelable:o=!1}={})=>{const l=n.$$.callbacks[e];if(l){const r=Bt(e,t,{cancelable:o});return l.slice().forEach(i=>{i.call(n,r)}),!r.defaultPrevented}return!0}}const ke=[],ce=[];let ve=[];const st=[],Jt=Promise.resolve();let ze=!1;function Xt(){ze||(ze=!0,Jt.then(Ye))}function _e(n){ve.push(n)}const Fe=new Set;let ge=0;function Ye(){if(ge!==0)return;const n=Te;do{try{for(;ge<ke.length;){const e=ke[ge];ge++,ae(e),Ft(e.$$)}}catch(e){throw ke.length=0,ge=0,e}for(ae(null),ke.length=0,ge=0;ce.length;)ce.pop()();for(let e=0;e<ve.length;e+=1){const t=ve[e];Fe.has(t)||(Fe.add(t),t())}ve.length=0}while(ke.length);for(;st.length;)st.pop()();ze=!1,Fe.clear(),ae(n)}function Ft(n){if(n.fragment!==null){n.update(),ee(n.before_update);const e=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,e),n.after_update.forEach(_e)}}function Wt(n){const e=[],t=[];ve.forEach(o=>n.indexOf(o)===-1?e.push(o):t.push(o)),t.forEach(o=>o()),ve=e}const Ne=new Set;let pe;function Ie(){pe={r:0,c:[],p:pe}}function Oe(){pe.r||ee(pe.c),pe=pe.p}function j(n,e){n&&n.i&&(Ne.delete(n),n.i(e))}function A(n,e,t,o){if(n&&n.o){if(Ne.has(n))return;Ne.add(n),pe.c.push(()=>{Ne.delete(n),o&&(t&&n.d(1),o())}),n.o(e)}else o&&o()}function $e(n,e){const t=e.token={};function o(l,r,i,c){if(e.token!==t)return;e.resolved=c;let u=e.ctx;i!==void 0&&(u=u.slice(),u[i]=c);const a=l&&(e.current=l)(u);let d=!1;e.block&&(e.blocks?e.blocks.forEach((f,g)=>{g!==r&&f&&(Ie(),A(f,1,1,()=>{e.blocks[g]===f&&(e.blocks[g]=null)}),Oe())}):e.block.d(1),a.c(),j(a,1),a.m(e.mount(),e.anchor),d=!0),e.block=a,e.blocks&&(e.blocks[r]=a),d&&Ye()}if(Nt(n)){const l=Je();if(n.then(r=>{ae(l),o(e.then,1,e.value,r),ae(null)},r=>{if(ae(l),o(e.catch,2,e.error,r),ae(null),!e.hasCatch)throw r}),e.current!==e.pending)return o(e.pending,0),!0}else{if(e.current!==e.then)return o(e.then,1,e.value,n),!0;e.resolved=n}}function Ke(n,e,t){const o=e.slice(),{resolved:l}=n;n.current===n.then&&(o[n.value]=l),n.current===n.catch&&(o[n.error]=l),n.block.p(o,t)}function oe(n){return(n==null?void 0:n.length)!==void 0?n:Array.from(n)}function Vt(n,e){n.d(1),e.delete(n.key)}function zt(n,e,t,o,l,r,i,c,u,a,d,f){let g=n.length,_=r.length,p=g;const y={};for(;p--;)y[n[p].key]=p;const v=[],R=new Map,T=new Map,N=[];for(p=_;p--;){const C=f(l,r,p),w=t(C);let b=i.get(w);b?o&&N.push(()=>b.p(C,e)):(b=a(w,C),b.c()),R.set(w,v[p]=b),w in y&&T.set(w,Math.abs(p-y[w]))}const M=new Set,I=new Set;function D(C){j(C,1),C.m(c,d),i.set(C.key,C),d=C.first,_--}for(;g&&_;){const C=v[_-1],w=n[g-1],b=C.key,O=w.key;C===w?(d=C.first,g--,_--):R.has(O)?!i.has(b)||M.has(b)?D(C):I.has(O)?g--:T.get(b)>T.get(O)?(I.add(b),D(C)):(M.add(O),g--):(u(w,i),g--)}for(;g--;){const C=n[g];R.has(C.key)||u(C,i)}for(;_;)D(v[_-1]);return ee(N),v}function Z(n){n&&n.c()}function V(n,e,t){const{fragment:o,after_update:l}=n.$$;o&&o.m(e,t),_e(()=>{const r=n.$$.on_mount.map(Lt).filter(Ae);n.$$.on_destroy?n.$$.on_destroy.push(...r):ee(r),n.$$.on_mount=[]}),l.forEach(_e)}function z(n,e){const t=n.$$;t.fragment!==null&&(Wt(t.after_update),ee(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function Zt(n,e){n.$$.dirty[0]===-1&&(ke.push(n),Xt(),n.$$.dirty.fill(0)),n.$$.dirty[e/31|0]|=1<<e%31}function K(n,e,t,o,l,r,i=null,c=[-1]){const u=Te;ae(n);const a=n.$$={fragment:null,ctx:[],props:r,update:H,not_equal:l,bound:nt(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(u?u.$$.context:[])),callbacks:nt(),dirty:c,skip_bound:!1,root:e.target||u.$$.root};i&&i(a.root);let d=!1;if(a.ctx=t?t(n,e.props||{},(f,g,..._)=>{const p=_.length?_[0]:g;return a.ctx&&l(a.ctx[f],a.ctx[f]=p)&&(!a.skip_bound&&a.bound[f]&&a.bound[f](p),d&&Zt(n,f)),g}):[],a.update(),d=!0,ee(a.before_update),a.fragment=o?o(a.ctx):!1,e.target){if(e.hydrate){const f=Dt(e.target);a.fragment&&a.fragment.l(f),f.forEach($)}else a.fragment&&a.fragment.c();e.intro&&j(n.$$.fragment),V(n,e.target,e.anchor),Ye()}ae(u)}class Q{constructor(){Se(this,"$$");Se(this,"$$set")}$destroy(){z(this,1),this.$destroy=H}$on(e,t){if(!Ae(t))return H;const o=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return o.push(t),()=>{const l=o.indexOf(t);l!==-1&&o.splice(l,1)}}$set(e){this.$$set&&!jt(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Yt="4",he=[];function je(n,e=H){let t;const o=new Set;function l(c){if(Y(n,c)&&(n=c,t)){const u=!he.length;for(const a of o)a[1](),he.push(a,n);if(u){for(let a=0;a<he.length;a+=2)he[a][0](he[a+1]);he.length=0}}}function r(c){l(c(n))}function i(c,u=H){const a=[c,u];return o.add(a),o.size===1&&(t=e(l,r)||H),c(n),()=>{o.delete(a),o.size===0&&t&&(t(),t=null)}}return{set:l,update:r,subscribe:i}}var Le=(n=>(n.info="info",n.warn="warn",n.error="error",n))(Le||{});class Kt{constructor(){Se(this,"logs",je([]))}_addLog(e,t){this.logs.update(o=>(o.unshift({date:new Date,severity:e,content:t}),o))}info(e){this._addLog("info",e)}warn(e){this._addLog("warn",e)}error(e){this._addLog("error",e)}}const x=new Kt;function Qt(n,e){let t=!1;return n.subscribe(o=>{t?e(o):t=!0})}const en={use_dark_theme:!0,rs_plugin_loader:!1,flatpak_rich_presence:!1,runelite_use_custom_jar:!1,use_custom_rs_config_uri:!1,selected_game:W.osrs,selected_client:ue.official};function tn(){const e=new URLSearchParams(window.location.search).get("config");function t(i){return typeof i=="object"&&typeof i.use_dark_theme=="boolean"&&typeof i.rs_plugin_loader=="boolean"&&typeof i.flatpak_rich_presence=="boolean"&&typeof i.runelite_use_custom_jar=="boolean"&&Object.values(W).includes(i.selected_game)&&Object.values(ue).includes(i.selected_client)}const{config:o}=q;if(e)try{const i=JSON.parse(e);t(i)?o.set(i):(x.error("The config saved on disk is not the correct format. It has been restored to default."),q.configHasPendingChanges=!0)}catch{x.error("Unable to parse config, restoring to default"),q.configHasPendingChanges=!0}const l=se(o).selected_user_id;G.findSession(l??"")===void 0&&Qe(),Qt(q.config,()=>{q.configHasPendingChanges=!0})}function Qe(){const{config:n,sessions:e}=q;n.update(t=>{const o=se(e);if(o.length>0){const l=o[0];t.selected_user_id=l.user.userId,t.selected_account_id=l.accounts[0].accountId}else t.selected_user_id=void 0,t.selected_account_id=void 0;return t})}const q={configHasPendingChanges:!1,config:je(en),sessions:je([])};let We=!1;class G{static async logout(e){const{sessions:t}=q,o=se(t),l=o.findIndex(r=>r.user.userId===e);return l>-1&&(ne.revokeOauthCreds(o[l].tokens.access_token),o.splice(l,1),t.set(o)),Qe(),G.saveCredentials(),o}static saveConfig(e=!0){if(We||e&&!q.configHasPendingChanges)return;We=!0;const t=new XMLHttpRequest;t.open("POST","/save-config",!0),t.onreadystatechange=()=>{t.readyState==4&&(x.info(`Save config status: '${t.responseText.trim()}'`),We=!1)},t.setRequestHeader("Content-Type","application/json");const o=se(q.config);return t.send(JSON.stringify(o)),o}static async saveCredentials(){new Promise(e=>{const t=new XMLHttpRequest;t.open("POST","/save-credentials",!0),t.setRequestHeader("Content-Type","application/json"),t.onreadystatechange=()=>{t.readyState==4&&e(void 0)};const o=se(q.sessions);t.send(JSON.stringify(o))})}static async openFilePicker(){return new Promise(e=>{const t=new XMLHttpRequest;t.onreadystatechange=()=>{if(t.readyState==4)return t.status==200?e(t.responseText):e(void 0)},t.open("GET","/jar-file-picker",!0),t.send()})}static findSession(e){return se(q.sessions).find(o=>o.user.userId===e)}static findAccount(e,t){return e.find(o=>o.accountId==t)}}function nn(n,e,t){G.saveConfig();const o=(c,u)=>{const a=new XMLHttpRequest,d={},f=se(q.config);c&&(d.hash=c),n&&(d.jx_session_id=n),e&&(d.jx_character_id=e),t&&(d.jx_display_name=t),f.rs_plugin_loader&&(d.plugin_loader="1"),f.use_custom_rs_config_uri&&f.rs_config_uri?d.config_uri=f.rs_config_uri:d.config_uri=L.env.default_config_uri,a.open("POST","/launch-rs3-deb?".concat(new URLSearchParams(d).toString()),!0),a.onreadystatechange=()=>{a.readyState==4&&(x.info(`Game launch status: '${a.responseText.trim()}'`),a.status==200&&c&&(L.rs3DebInstalledHash=c))},a.send(u)},l=new XMLHttpRequest,r=L.env.content_url,i=r.concat("dists/trusty/non-free/binary-amd64/Packages");l.open("GET",i,!0),l.onreadystatechange=()=>{if(l.readyState==4&&l.status==200){const c=Object.fromEntries(l.response.split(`
`).map(u=>u.split(": ")));if(!c.Filename||!c.Size){x.error(`Could not parse package data from URL: ${i}`),o();return}if(c.SHA256!==L.rs3DebInstalledHash){x.info("Downloading RS3 client...");const u=new XMLHttpRequest;u.open("GET",r.concat(c.Filename),!0),u.responseType="arraybuffer",u.onprogress=a=>{if(a.loaded){const d=(Math.round(1e3*a.loaded/a.total)/10).toFixed(1);x.info(`Downloading RS3 client... ${d}%`)}},u.onreadystatechange=()=>{u.readyState==4&&u.status==200&&o(c.SHA256,u.response)},u.onerror=()=>{x.error(`Error downloading game client: from ${i}: non-http error`),o()},u.send()}else x.info("Latest client is already installed"),o()}},l.onerror=()=>{x.error(`Error: from ${i}: non-http error`),o()},l.send()}function Pt(n,e,t,o){G.saveConfig();const l=o?"/launch-runelite-jar-configure?":"/launch-runelite-jar?",r=(u,a,d)=>{const f=new XMLHttpRequest,g={};u&&(g.id=u),d&&(g.jar_path=d),n&&(g.jx_session_id=n),e&&(g.jx_character_id=e),t&&(g.jx_display_name=t),se(q.config).flatpak_rich_presence&&(g.flatpak_rich_presence=""),f.open(a?"POST":"GET",l.concat(new URLSearchParams(g).toString()),!0),f.onreadystatechange=()=>{f.readyState==4&&(x.info(`Game launch status: '${f.responseText.trim()}'`),f.status==200&&u&&(L.runeLiteInstalledId=u))},f.send(a)};if(se(q.config).runelite_use_custom_jar){r(null,null,se(q.config).runelite_custom_jar);return}const i=new XMLHttpRequest,c="https://api.github.com/repos/runelite/launcher/releases";i.open("GET",c,!0),i.onreadystatechange=()=>{if(i.readyState==4)if(i.status==200){const u=JSON.parse(i.responseText).map(a=>a.assets).flat().find(a=>a.name.toLowerCase()=="runelite.jar");if(u.id!=L.runeLiteInstalledId){x.info("Downloading RuneLite...");const a=new XMLHttpRequest;a.open("GET",u.browser_download_url,!0),a.responseType="arraybuffer",a.onreadystatechange=()=>{a.readyState==4&&(a.status==200?r(u.id,a.response):x.error(`Error downloading from ${u.url}: ${a.status}: ${a.responseText}`))},a.onprogress=d=>{if(d.loaded&&d.lengthComputable){const f=(Math.round(1e3*d.loaded/d.total)/10).toFixed(1);x.info(`Downloading RuneLite... ${f}`)}},a.send()}else x.info("Latest JAR is already installed"),r()}else x.error(`Error from ${c}: ${i.status}: ${i.responseText}`)},i.send()}function sn(n,e,t){G.saveConfig();const o=(i,c)=>{const u=new XMLHttpRequest,a={};i&&(a.version=i),n&&(a.jx_session_id=n),e&&(a.jx_character_id=e),t&&(a.jx_display_name=t),u.open("POST","/launch-hdos-jar?".concat(new URLSearchParams(a).toString()),!0),u.onreadystatechange=()=>{u.readyState==4&&(x.info(`Game launch status: '${u.responseText.trim()}'`),u.status==200&&i&&(L.hdosInstalledVersion=i))},u.send(c)},l=new XMLHttpRequest,r="https://cdn.hdos.dev/client/getdown.txt";l.open("GET",r,!0),l.onreadystatechange=()=>{if(l.readyState==4)if(l.status==200){const i=l.responseText.match(/^launcher\.version *= *(.*?)$/m);if(i&&i.length>=2){const c=i[1];if(c!==L.hdosInstalledVersion){const u=`https://cdn.hdos.dev/launcher/v${c}/hdos-launcher.jar`;x.info("Downloading HDOS...");const a=new XMLHttpRequest;a.open("GET",u,!0),a.responseType="arraybuffer",a.onreadystatechange=()=>{if(a.readyState==4)if(a.status==200)o(c,a.response);else{const d=JSON.parse(l.responseText).map(f=>f.assets).flat().find(f=>f.name.toLowerCase()=="runelite.jar");x.error(`Error downloading from ${d.url}: ${a.status}: ${a.responseText}`)}},a.onprogress=d=>{if(d.loaded&&d.lengthComputable){const f=(Math.round(1e3*d.loaded/d.total)/10).toFixed(1);x.info(`Downloading HDOS... ${f}%`)}},a.send()}else x.info("Latest JAR is already installed"),o()}else x.info("Couldn't parse latest launcher version"),o()}else x.error(`Error from ${r}: ${l.status}: ${l.responseText}`)},l.send()}function It(){return new Promise((n,e)=>{const t=new XMLHttpRequest,o=L.internalUrl.concat("/list-game-clients");t.open("GET",o,!0),t.onreadystatechange=()=>{if(t.readyState==4)if(t.status==200&&t.getResponseHeader("content-type")==="application/json"){const l=JSON.parse(t.responseText);n(Object.keys(l).map(r=>({uid:r,identity:l[r].identity||null})))}else e(`error (${t.responseText})`)},t.send()})}function on(){const n=new XMLHttpRequest;n.open("POST","/save-plugin-config",!0),n.setRequestHeader("Content-Type","application/json"),n.onreadystatechange=()=>{n.readyState==4&&x.info(`Save-plugin-config status: ${n.responseText.trim()}`)},n.send(JSON.stringify(L.pluginList))}async function ot(n,e,t,o,l){G.saveConfig();const r=`${e?"osrs":L.env.provider}-${n?"win":"mac"}`;let i=n?e?L.osrsExeInstalledHash:L.rs3ExeInstalledHash:e?L.osrsAppInstalledHash:L.rs3AppInstalledHash;const c=async(C,w)=>{const b={};C&&(b.hash=C),t&&(b.jx_session_id=t),o&&(b.jx_character_id=o),l&&(b.jx_display_name=l);const O=await fetch(`/launch-${e?"osrs":"rs3"}-${n?"exe":"app"}?${new URLSearchParams(b).toString()}`,{method:"POST",headers:{"Content-Type":"application/octet-stream"},body:await w});O.text().then(U=>x.info(`Game launch status: '${U.trim()}'`)),O.status==200&&C&&(i=C)},u=`${L.env.direct6_url}${r}/${r}.json`,a=await fetch(u,{method:"GET"}),d=await a.text();if(a.status!==200){x.error(`Error from ${u}: ${a.status}: ${d}`);return}const f=JSON.parse(atob(d.split(".")[1])).environments.production;if(i===f.id){x.info("Latest client is already installed"),c();return}x.info(`Downloading client version ${f.version}`);const g=`${L.env.direct6_url}${r}/catalog/${f.id}/catalog.json`,_=await fetch(g,{method:"GET"}),p=await _.text();if(_.status!==200){x.error(`Error from ${g}: ${_.status}: ${p}`);return}const y=JSON.parse(atob(p.split(".")[1])),v=y.metafile.replace(/^http:/i,"https:"),R=await fetch(v,{method:"GET"}),T=await R.text();if(R.status!==200){x.error(`Error from ${v}: ${R.status}: ${T}`);return}const N=JSON.parse(atob(T.split(".")[1])),M=N.pieces.digests.map(C=>{const w=atob(C).split("").map(O=>O.charCodeAt(0).toString(16).padStart(2,"0")).join(""),b=y.config.remote.baseUrl.replace(/^http:/i,"https:").concat(y.config.remote.pieceFormat.replace("{SubString:0,2,{TargetDigest}}",w.substring(0,2)).replace("{TargetDigest}",w));return fetch(b,{method:"GET"}).then(O=>O.blob().then(U=>{const X=new DecompressionStream("gzip");return new Response(U.slice(6).stream().pipeThrough(X)).blob()}))});let I=0,D=null;for(let C=0;C<N.files.length;C+=1)if(n?N.files[C].name.endsWith(".exe"):N.files[C].name.includes(".app/Contents/MacOS/"))if(D!==null){x.error(`Error parsing ${v}: file list has multiple possibilities for main exe`);return}else D=N.files[C].size;else D===null&&(I+=N.files[C].size);if(D===null){x.error(`Error parsing ${v}: file list has no possibilities for main exe`);return}Promise.all(M).then(C=>{const w=new Blob(C).slice(I,I+D);c(N.id,w.arrayBuffer())})}const Ze=je();typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(Yt);function ln(n){let e,t;const o=n[4].default,l=qe(o,n,n[3],null);return{c(){e=m("main"),l&&l.c(),h(e,"class","fixed top-0 h-screen w-screen bg-slate-100 text-xs text-slate-900 duration-200 sm:text-sm md:text-base dark:bg-slate-900 dark:text-slate-50"),F(e,"dark",n[0])},m(r,i){S(r,e,i),l&&l.m(e,null),t=!0},p(r,[i]){l&&l.p&&(!t||i&8)&&Be(l,o,r,r[3],t?De(o,r[3],i,null):Ge(r[3]),null),(!t||i&1)&&F(e,"dark",r[0])},i(r){t||(j(l,r),t=!0)},o(r){A(l,r),t=!1},d(r){r&&$(e),l&&l.d(r)}}}function rn(n,e,t){let o,l,{$$slots:r={},$$scope:i}=e;const{config:c}=q;return le(n,c,u=>t(2,l=u)),n.$$set=u=>{"$$scope"in u&&t(3,i=u.$$scope)},n.$$.update=()=>{n.$$.dirty&4&&t(0,o=l.use_dark_theme)},[o,c,l,i,r]}class Ot extends Q{constructor(e){super(),K(this,e,rn,ln,Y,{})}}function an(n){let e;return{c(){e=m("div"),e.innerHTML='<img class="h-60 w-60 animate-spin" src="svgs/circle-notch-solid.svg" alt="loading"/>',h(e,"class","flex h-full items-center justify-center")},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function cn(n){let e,t;return e=new Ot({props:{$$slots:{default:[an]},$$scope:{ctx:n}}}),{c(){Z(e.$$.fragment)},m(o,l){V(e,o,l),t=!0},p(o,[l]){const r={};l&32&&(r.$$scope={dirty:l,ctx:o}),e.$set(r)},i(o){t||(j(e.$$.fragment,o),t=!0)},o(o){A(e.$$.fragment,o),t=!1},d(o){z(e,o)}}}function un(n){const e=window.opener;L.env==null&&l("BoltEnv is not defined. Please close and re-open Bolt to try again.");async function t(i){const c=we.get("auth_verifier");if(!c)return l("Verifier token has expired. Please try signing in again."),null;const{clientid:u,redirect:a}=L.env,d=await ne.getOAuthToken(L.env.origin,u,c,a,i);return d.ok?d.value:(l(`Fetching OAuth token failed. ${d.error}`),null)}async function o(i){const c=we.get("auth_nonce"),u=ne.validateIdToken(i,c??"");if(!u.ok)return l(u.error),null;const a=await ne.getSessionId(L.env.auth_api,i);return a.ok?a.value:(l(`Unable to retreive session id. ${a.error}`),null)}function l(i){r({type:"authFailed",reason:i}),window.close()}function r(i){e.postMessage(i,L.internalUrl)}return Tt(async()=>{const i=new URLSearchParams(window.location.search),c=i.get("code"),u=i.get("state"),a=i.get("id_token");if(a==null&&c&&u){const d=await t(c);if(!d)return l("tokens object is null.");r({type:"authTokenUpdate",tokens:d});const f=crypto.randomUUID();ne.navigateToAuthConsent(L.env.origin,d.id_token,f)}else if(a&&c&&u){const d=await o(a);if(!d)return l("sessionId is null");r({type:"authSessionUpdate",sessionId:d}),window.close()}else l("Authentication server did not response with the appropriate parameters. Please try again later.")}),xt(()=>{we.remove("auth_verifier"),we.remove("auth_nonce")}),[]}class dn extends Q{constructor(e){super(),K(this,e,un,cn,Y,{})}}function lt(n){let e,t,o;return{c(){e=m("button"),e.innerHTML='<img src="svgs/xmark-solid.svg" class="h-5 w-5" alt="Close"/>',h(e,"class","absolute right-3 top-3 rounded-full bg-rose-500 p-[2px] shadow-lg duration-200 hover:rotate-90 hover:opacity-75")},m(l,r){S(l,e,r),t||(o=E(e,"click",n[8]),t=!0)},p:H,d(l){l&&$(e),t=!1,o()}}}function rt(n){let e;const t=n[7].default,o=qe(t,n,n[6],null);return{c(){o&&o.c()},m(l,r){o&&o.m(l,r),e=!0},p(l,r){o&&o.p&&(!e||r&64)&&Be(o,t,l,l[6],e?De(t,l[6],r,null):Ge(l[6]),null)},i(l){e||(j(o,l),e=!0)},o(l){A(o,l),e=!1},d(l){o&&o.d(l)}}}function fn(n){let e,t,o,l,r,i,c=n[1]&&lt(n),u=n[3]&&rt(n);return{c(){e=m("dialog"),c&&c.c(),t=P(),u&&u.c(),h(e,"class",o=n[0]+" backdrop max-h-[90%] max-w-[90%] overflow-auto rounded-xl p-3 text-inherit focus-visible:outline-none svelte-csux1e"),F(e,"backdrop:cursor-pointer",n[1])},m(a,d){S(a,e,d),c&&c.m(e,null),k(e,t),u&&u.m(e,null),n[9](e),l=!0,r||(i=[E(e,"keydown",n[10]),E(e,"mousedown",qt(n[11]))],r=!0)},p(a,[d]){a[1]?c?c.p(a,d):(c=lt(a),c.c(),c.m(e,t)):c&&(c.d(1),c=null),a[3]?u?(u.p(a,d),d&8&&j(u,1)):(u=rt(a),u.c(),j(u,1),u.m(e,null)):u&&(Ie(),A(u,1,1,()=>{u=null}),Oe()),(!l||d&1&&o!==(o=a[0]+" backdrop max-h-[90%] max-w-[90%] overflow-auto rounded-xl p-3 text-inherit focus-visible:outline-none svelte-csux1e"))&&h(e,"class",o),(!l||d&3)&&F(e,"backdrop:cursor-pointer",a[1])},i(a){l||(j(u),l=!0)},o(a){A(u),l=!1},d(a){a&&$(e),c&&c.d(),u&&u.d(),n[9](null),r=!1,ee(i)}}}function pn(n,e,t){let{$$slots:o={},$$scope:l}=e,{class:r=""}=e,{canSelfClose:i=!0}=e,c,u=!1;const a=Gt();function d(){c.showModal(),t(3,u=!0)}function f(){a("close"),c.close(),t(3,u=!1)}const g=()=>c.close();function _(v){ce[v?"unshift":"push"](()=>{c=v,t(2,c)})}const p=v=>{v.key==="Escape"&&!i&&v.preventDefault()},y=()=>{i&&c.close()};return n.$$set=v=>{"class"in v&&t(0,r=v.class),"canSelfClose"in v&&t(1,i=v.canSelfClose),"$$scope"in v&&t(6,l=v.$$scope)},[r,i,c,u,d,f,l,o,g,_,p,y]}class et extends Q{constructor(e){super(),K(this,e,pn,fn,Y,{class:0,canSelfClose:1,open:4,close:5})}get open(){return this.$$.ctx[4]}get close(){return this.$$.ctx[5]}}function _n(n){let e,t,o,l,r,i,c;return{c(){e=m("p"),e.textContent=`${atob("Qm9sdCBpcyBhbiB1bm9mZmljaWFsIHRoaXJkLXBhcnR5IGxhdW5jaGVyLiBJdCdzIGZyZWUgYW5kIG9wZW4tc291cmNlIHNvZnR3YXJlIGxpY2Vuc2VkIHVuZGVyIEFHUEwgMy4wLg==")}`,t=P(),o=m("p"),o.textContent=`${atob("SmFnZXggaXMgbm90IHJlc3BvbnNpYmxlIGZvciBhbnkgcHJvYmxlbXMgb3IgZGFtYWdlIGNhdXNlZCBieSB1c2luZyB0aGlzIHByb2R1Y3Qu")}`,l=P(),r=m("button"),r.textContent="I Understand",h(e,"class","p-2"),h(o,"class","p-2"),h(r,"class","m-5 rounded-lg border-2 border-blue-500 p-2 duration-200 hover:opacity-75")},m(u,a){S(u,e,a),S(u,t,a),S(u,o,a),S(u,l,a),S(u,r,a),i||(c=E(r,"click",n[2]),i=!0)},p:H,d(u){u&&($(e),$(t),$(o),$(l),$(r)),i=!1,c()}}}function gn(n){let e,t,o={canSelfClose:!1,class:"w-1/2 text-center",$$slots:{default:[_n]},$$scope:{ctx:n}};return e=new et({props:o}),n[3](e),{c(){Z(e.$$.fragment)},m(l,r){V(e,l,r),t=!0},p(l,[r]){const i={};r&33&&(i.$$scope={dirty:r,ctx:l}),e.$set(i)},i(l){t||(j(e.$$.fragment,l),t=!0)},o(l){A(e.$$.fragment,l),t=!1},d(l){n[3](null),z(e,l)}}}function hn(n,e,t){let o;const{sessions:l}=q;le(n,l,u=>t(4,o=u));let r;Tt(()=>{o.length==0&&r.open()});const i=()=>r.close();function c(u){ce[u?"unshift":"push"](()=>{r=u,t(0,r)})}return[r,l,i,c]}class mn extends Q{constructor(e){super(),K(this,e,hn,gn,Y,{})}}function it(n,e,t){const o=n.slice();return o[23]=e[t][0],o[22]=e[t][1],o}function at(n,e,t){const o=n.slice();return o[27]=e[t],o}function bn(n){let e;return{c(){e=m("p"),e.textContent="error"},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function kn(n){let e;function t(r,i){return r[26].length==0?yn:wn}let o=t(n),l=o(n);return{c(){l.c(),e=fe()},m(r,i){l.m(r,i),S(r,e,i)},p(r,i){o===(o=t(r))&&l?l.p(r,i):(l.d(1),l=o(r),l&&(l.c(),l.m(e.parentNode,e)))},d(r){r&&$(e),l.d(r)}}}function wn(n){let e,t=oe(n[26]),o=[];for(let l=0;l<t.length;l+=1)o[l]=ct(at(n,t,l));return{c(){for(let l=0;l<o.length;l+=1)o[l].c();e=fe()},m(l,r){for(let i=0;i<o.length;i+=1)o[i]&&o[i].m(l,r);S(l,e,r)},p(l,r){if(r&70){t=oe(l[26]);let i;for(i=0;i<t.length;i+=1){const c=at(l,t,i);o[i]?o[i].p(c,r):(o[i]=ct(c),o[i].c(),o[i].m(e.parentNode,e))}for(;i<o.length;i+=1)o[i].d(1);o.length=t.length}},d(l){l&&$(e),Pe(o,l)}}}function yn(n){let e;return{c(){e=m("p"),e.textContent="(start an RS3 game client with plugins enabled and it will be listed here.)"},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function ct(n){let e,t=(n[27].identity||ft)+"",o,l,r,i,c,u;function a(){return n[14](n[27])}return{c(){e=m("button"),o=B(t),r=P(),i=m("br"),h(e,"class",l="m-1 h-[28px] w-[95%] rounded-lg border-2 "+(n[6]&&n[1]===n[27].uid?"border-black bg-blue-500 text-black":"border-blue-500 text-black dark:text-white")+" hover:opacity-75")},m(d,f){S(d,e,f),k(e,o),S(d,r,f),S(d,i,f),c||(u=E(e,"click",a),c=!0)},p(d,f){n=d,f&4&&t!==(t=(n[27].identity||ft)+"")&&re(o,t),f&70&&l!==(l="m-1 h-[28px] w-[95%] rounded-lg border-2 "+(n[6]&&n[1]===n[27].uid?"border-black bg-blue-500 text-black":"border-blue-500 text-black dark:text-white")+" hover:opacity-75")&&h(e,"class",l)},d(d){d&&($(e),$(r),$(i)),c=!1,u()}}}function vn(n){let e;return{c(){e=m("p"),e.textContent="loading..."},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function $n(n){let e;return{c(){e=m("p"),e.textContent="error"},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function Sn(n){let e,t,o,l,r,i=oe(Object.entries(n[3].pluginList)),c=[];for(let f=0;f<i.length;f+=1)c[f]=ut(it(n,i,f));function u(f,g){return f[6]?Ln:Cn}let a=u(n),d=a(n);return{c(){e=m("select");for(let f=0;f<c.length;f+=1)c[f].c();t=P(),d.c(),o=fe(),h(e,"class","mx-auto mb-4 w-[min(280px,_45%)] cursor-pointer rounded-lg border-2 border-slate-300 bg-inherit p-2 text-inherit duration-200 hover:opacity-75 dark:border-slate-800"),n[0]===void 0&&_e(()=>n[15].call(e))},m(f,g){S(f,e,g);for(let _=0;_<c.length;_+=1)c[_]&&c[_].m(e,null);de(e,n[0],!0),S(f,t,g),d.m(f,g),S(f,o,g),l||(r=E(e,"change",n[15]),l=!0)},p(f,g){if(g&8){i=oe(Object.entries(f[3].pluginList));let _;for(_=0;_<i.length;_+=1){const p=it(f,i,_);c[_]?c[_].p(p,g):(c[_]=ut(p),c[_].c(),c[_].m(e,null))}for(;_<c.length;_+=1)c[_].d(1);c.length=i.length}g&9&&de(e,f[0]),a===(a=u(f))&&d?d.p(f,g):(d.d(1),d=a(f),d&&(d.c(),d.m(o.parentNode,o)))},d(f){f&&($(e),$(t),$(o)),Pe(c,f),d.d(f),l=!1,r()}}}function ut(n){let e,t=(n[22].name??xe)+"",o,l;return{c(){e=m("option"),o=B(t),h(e,"class","dark:bg-slate-900"),e.__value=l=n[23],te(e,e.__value)},m(r,i){S(r,e,i),k(e,o)},p(r,i){i&8&&t!==(t=(r[22].name??xe)+"")&&re(o,t),i&8&&l!==(l=r[23])&&(e.__value=l,te(e,e.__value))},d(r){r&&$(e)}}}function Ln(n){let e,t,o,l,r={ctx:n,current:null,token:null,hasCatch:!0,pending:Hn,then:Tn,catch:Rn,value:22};return $e(l=n[8],r),{c(){e=m("br"),t=P(),o=fe(),r.block.c()},m(i,c){S(i,e,c),S(i,t,c),S(i,o,c),r.block.m(i,r.anchor=c),r.mount=()=>o.parentNode,r.anchor=o},p(i,c){n=i,r.ctx=n,c&256&&l!==(l=n[8])&&$e(l,r)||Ke(r,n,c)},d(i){i&&($(e),$(t),$(o)),r.block.d(i),r.token=null,r=null}}}function Cn(n){let e,t,o,l,r,i,c,u,a;function d(_,p){return p&8&&(i=null),i==null&&(i=Object.entries(_[3].pluginList).length!==0),i?En:Un}let f=d(n,-1),g=f(n);return{c(){e=m("button"),t=B("+"),o=P(),l=m("br"),r=P(),g.c(),c=fe(),h(e,"class","aspect-square w-8 rounded-lg border-2 border-blue-500 text-[20px] font-bold duration-200 enabled:hover:opacity-75 disabled:border-gray-500"),e.disabled=n[5]},m(_,p){S(_,e,p),k(e,t),S(_,o,p),S(_,l,p),S(_,r,p),g.m(_,p),S(_,c,p),u||(a=E(e,"click",n[10]),u=!0)},p(_,p){p&32&&(e.disabled=_[5]),f===(f=d(_,p))&&g?g.p(_,p):(g.d(1),g=f(_),g&&(g.c(),g.m(c.parentNode,c)))},d(_){_&&($(e),$(o),$(l),$(r),$(c)),g.d(_),u=!1,a()}}}function Rn(n){let e;return{c(){e=m("p"),e.textContent="error"},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function Tn(n){let e,t;function o(i,c){return c&265&&(e=null),e==null&&(e=!!(i[22]&&i[22].main&&Object.keys(i[3].pluginList).includes(i[0]))),e?Pn:xn}let l=o(n,-1),r=l(n);return{c(){r.c(),t=fe()},m(i,c){r.m(i,c),S(i,t,c)},p(i,c){l===(l=o(i,c))&&r?r.p(i,c):(r.d(1),r=l(i),r&&(r.c(),r.m(t.parentNode,t)))},d(i){i&&$(t),r.d(i)}}}function xn(n){let e;return{c(){e=m("p"),e.textContent="can't start plugin: does not appear to be configured"},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function Pn(n){let e;function t(r,i){return r[3].pluginList[r[0]].path?On:In}let o=t(n),l=o(n);return{c(){l.c(),e=fe()},m(r,i){l.m(r,i),S(r,e,i)},p(r,i){o===(o=t(r))&&l?l.p(r,i):(l.d(1),l=o(r),l&&(l.c(),l.m(e.parentNode,e)))},d(r){r&&$(e),l.d(r)}}}function In(n){let e;return{c(){e=m("p"),e.textContent="can't start plugin: no path is configured"},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function On(n){let e,t,o=n[22].name+"",l,r,i;function c(){return n[18](n[22])}return{c(){e=m("button"),t=B("Start "),l=B(o),h(e,"class","mx-auto mb-1 w-auto rounded-lg bg-emerald-500 p-2 font-bold text-black duration-200 hover:opacity-75")},m(u,a){S(u,e,a),k(e,t),k(e,l),r||(i=E(e,"click",c),r=!0)},p(u,a){n=u,a&256&&o!==(o=n[22].name+"")&&re(l,o)},d(u){u&&$(e),r=!1,i()}}}function Hn(n){let e;return{c(){e=m("p"),e.textContent="loading..."},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function Un(n){let e;return{c(){e=m("p"),e.textContent=`You have no plugins installed. Click the + button and select a plugin's bolt.json file
						to add it.`},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function En(n){let e=Object.keys(n[3].pluginList).includes(n[0])&&n[8]!==null,t,o=e&&dt(n);return{c(){o&&o.c(),t=fe()},m(l,r){o&&o.m(l,r),S(l,t,r)},p(l,r){r&265&&(e=Object.keys(l[3].pluginList).includes(l[0])&&l[8]!==null),e?o?o.p(l,r):(o=dt(l),o.c(),o.m(t.parentNode,t)):o&&(o.d(1),o=null)},d(l){l&&$(t),o&&o.d(l)}}}function dt(n){let e,t,o,l,r,i,c,u={ctx:n,current:null,token:null,hasCatch:!0,pending:jn,then:Mn,catch:Nn,value:22};return $e(e=n[8],u),{c(){u.block.c(),t=P(),o=m("button"),o.textContent="Remove",l=P(),r=m("button"),r.textContent="Reload",h(o,"class","mx-auto mb-1 w-[min(144px,_25%)] rounded-lg p-2 font-bold text-black duration-200 enabled:bg-rose-500 enabled:hover:opacity-75 disabled:bg-gray-500"),h(r,"class","mx-auto mb-1 w-[min(144px,_25%)] rounded-lg p-2 font-bold text-black duration-200 enabled:bg-blue-500 enabled:hover:opacity-75 disabled:bg-gray-500")},m(a,d){u.block.m(a,u.anchor=d),u.mount=()=>t.parentNode,u.anchor=t,S(a,t,d),S(a,o,d),S(a,l,d),S(a,r,d),i||(c=[E(o,"click",n[16]),E(r,"click",n[17])],i=!0)},p(a,d){n=a,u.ctx=n,d&256&&e!==(e=n[8])&&$e(e,u)||Ke(u,n,d)},d(a){a&&($(t),$(o),$(l),$(r)),u.block.d(a),u.token=null,u=null,i=!1,ee(c)}}}function Nn(n){let e,t,o;return{c(){e=m("p"),e.textContent="error",t=P(),o=m("br")},m(l,r){S(l,e,r),S(l,t,r),S(l,o,r)},p:H,d(l){l&&($(e),$(t),$(o))}}}function Mn(n){let e,t=(n[22].name??xe)+"",o,l,r,i=(n[22].description??"no description")+"",c,u,a,d;return{c(){e=m("p"),o=B(t),l=P(),r=m("p"),c=B(i),a=P(),d=m("br"),h(e,"class","pb-4 text-xl font-bold"),h(r,"class",u=n[22].description?null:"italic")},m(f,g){S(f,e,g),k(e,o),S(f,l,g),S(f,r,g),k(r,c),S(f,a,g),S(f,d,g)},p(f,g){g&256&&t!==(t=(f[22].name??xe)+"")&&re(o,t),g&256&&i!==(i=(f[22].description??"no description")+"")&&re(c,i),g&256&&u!==(u=f[22].description?null:"italic")&&h(r,"class",u)},d(f){f&&($(e),$(l),$(r),$(a),$(d))}}}function jn(n){let e;return{c(){e=m("p"),e.textContent="loading..."},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function An(n){let e,t,o,l,r,i,c,u,a,d,f,g,_={ctx:n,current:null,token:null,hasCatch:!0,pending:vn,then:kn,catch:bn,value:26};$e(u=n[2],_);function p(R,T){return R[3].hasBoltPlugins?Sn:$n}let y=p(n),v=y(n);return{c(){e=m("div"),t=m("button"),o=B("Manage Plugins"),r=P(),i=m("hr"),c=P(),_.block.c(),a=P(),d=m("div"),v.c(),h(t,"class",l="mx-auto mb-2 w-[95%] rounded-lg border-2 "+(n[6]?"border-blue-500 text-black dark:text-white":"border-black bg-blue-500 text-black")+" p-2 font-bold hover:opacity-75"),h(i,"class","p-1 dark:border-slate-700"),h(e,"class","left-0 float-left h-full w-[min(180px,_50%)] overflow-hidden border-r-2 border-slate-300 pt-2 dark:border-slate-800"),h(d,"class","h-full pt-10")},m(R,T){S(R,e,T),k(e,t),k(t,o),k(e,r),k(e,i),k(e,c),_.block.m(e,_.anchor=null),_.mount=()=>e,_.anchor=null,S(R,a,T),S(R,d,T),v.m(d,null),f||(g=E(t,"click",n[13]),f=!0)},p(R,T){n=R,T&64&&l!==(l="mx-auto mb-2 w-[95%] rounded-lg border-2 "+(n[6]?"border-blue-500 text-black dark:text-white":"border-black bg-blue-500 text-black")+" p-2 font-bold hover:opacity-75")&&h(t,"class",l),_.ctx=n,T&4&&u!==(u=n[2])&&$e(u,_)||Ke(_,n,T),y===(y=p(n))&&v?v.p(n,T):(v.d(1),v=y(n),v&&(v.c(),v.m(d,null)))},d(R){R&&($(e),$(a),$(d)),_.block.d(),_.token=null,_=null,v.d(),f=!1,g()}}}function qn(n){let e,t,o={class:"h-[90%] w-[90%]",$$slots:{default:[An]},$$scope:{ctx:n}};return e=new et({props:o}),n[19](e),{c(){Z(e.$$.fragment)},m(l,r){V(e,l,r),t=!0},p(l,[r]){const i={};r&1073742319&&(i.$$scope={dirty:r,ctx:l}),e.$set(i)},i(l){t||(j(e.$$.fragment,l),t=!0)},o(l){A(e.$$.fragment,l),t=!1},d(l){n[19](null),z(e,l)}}}const xe="(unnamed)",ft="(new character)";function Dn(n,e,t){let o,l;le(n,Ze,w=>t(2,l=w));let r;function i(){r.open()}const c=w=>new Promise((b,O)=>{const U=w.concat(w.endsWith("/")?"bolt.json":"/bolt.json");var X=new XMLHttpRequest;X.onreadystatechange=()=>{X.readyState==4&&(X.status==200?b(JSON.parse(X.responseText)):O(X.responseText))},X.open("GET","/read-json-file?".concat(new URLSearchParams({path:U}).toString()),!0),X.send()}),u=w=>{const O=L.pluginList[w];if(!O)return null;const U=O.path;return U?c(U):null},a=(w,b)=>{c(w).then(O=>{do t(0,_=crypto.randomUUID());while(Object.keys(L.pluginList).includes(_));t(3,L.pluginList[_]={name:O.name??xe,path:w},L),t(7,v=!0)}).catch(O=>{console.error(`Config file '${b}' couldn't be fetched, reason: ${O}`)})};let d=!1;const f=()=>{t(5,d=!0);var w=new XMLHttpRequest;w.onreadystatechange=()=>{if(w.readyState==4&&(t(5,d=!1),w.status==200)){const b=L.platform==="windows"?w.responseText.replaceAll("\\","/"):w.responseText;if(b.endsWith("/bolt.json")){const O=b.substring(0,b.length-9);a(O,b)}else console.log(`Selection '${b}' is not named bolt.json; ignored`)}},w.open("GET","/json-file-picker",!0),w.send()};Ze.set(It());const g=(w,b,O,U)=>{var X=new XMLHttpRequest;X.onreadystatechange=()=>{X.readyState==4&&x.info(`Start-plugin status: ${X.statusText.trim()}`)},X.open("GET","/start-plugin?".concat(new URLSearchParams({client:w,id:b,path:O,main:U}).toString()),!0),X.send()};var _,p=!1,y;let v=!1;xt(()=>{v&&on()});const R=()=>t(6,p=!1),T=w=>{t(1,y=w.uid),t(6,p=!0)};function N(){_=Me(this),t(0,_),t(3,L)}const M=()=>{t(8,o=null),t(7,v=!0);let w=L.pluginList;delete w[_],t(3,L.pluginList=w,L)},I=()=>t(8,o=u(_)),D=w=>g(y,_,L.pluginList[_].path??"",w.main??"");function C(w){ce[w?"unshift":"push"](()=>{r=w,t(4,r)})}return n.$$.update=()=>{n.$$.dirty&6&&l.then(w=>{w.some(b=>b.uid===y)||t(6,p=!1)}),n.$$.dirty&1&&t(8,o=u(_))},[_,y,l,L,r,d,p,v,o,u,f,g,i,R,T,N,M,I,D,C]}class Bn extends Q{constructor(e){super(),K(this,e,Dn,qn,Y,{open:12})}get open(){return this.$$.ctx[12]}}function pt(n,e,t){const o=n.slice();return o[10]=e[t],o}function _t(n,e,t){const o=n.slice();return o[13]=e[t],o}function Gn(n){let e,t,o={};return e=new Bn({props:o}),n[5](e),{c(){Z(e.$$.fragment)},m(l,r){V(e,l,r),t=!0},p(l,r){const i={};e.$set(i)},i(l){t||(j(e.$$.fragment,l),t=!0)},o(l){A(e.$$.fragment,l),t=!1},d(l){n[5](null),z(e,l)}}}function Jn(n){let e,t,o;return{c(){e=m("button"),e.textContent="Plugin menu",e.disabled=!L.hasBoltPlugins,h(e,"title",L.hasBoltPlugins?null:"Coming soon..."),h(e,"class","mx-auto mb-2 w-52 rounded-lg p-2 font-bold text-black duration-200 enabled:bg-blue-500 enabled:hover:opacity-75 disabled:bg-gray-500")},m(l,r){S(l,e,r),t||(o=E(e,"click",n[8]),t=!0)},p:H,d(l){l&&$(e),t=!1,o()}}}function Xn(n){let e,t,o,l,r,i,c=oe(tt[n[0].selected_game]),u=[];for(let a=0;a<c.length;a+=1)u[a]=gt(_t(n,c,a));return{c(){e=m("label"),t=m("span"),t.textContent="Game Client",o=P(),l=m("select");for(let a=0;a<u.length;a+=1)u[a].c();h(t,"class","text-sm"),h(l,"id","game_client_select"),h(l,"class","mx-auto w-52 cursor-pointer rounded-lg border-2 border-slate-300 bg-inherit p-2 text-inherit duration-200 hover:opacity-75 dark:border-slate-800"),n[0].selected_client===void 0&&_e(()=>n[7].call(l))},m(a,d){S(a,e,d),k(e,t),k(e,o),k(e,l);for(let f=0;f<u.length;f+=1)u[f]&&u[f].m(l,null);de(l,n[0].selected_client,!0),r||(i=E(l,"change",n[7]),r=!0)},p(a,d){if(d&1){c=oe(tt[a[0].selected_game]);let f;for(f=0;f<c.length;f+=1){const g=_t(a,c,f);u[f]?u[f].p(g,d):(u[f]=gt(g),u[f].c(),u[f].m(l,null))}for(;f<u.length;f+=1)u[f].d(1);u.length=c.length}d&1&&de(l,a[0].selected_client)},d(a){a&&$(e),Pe(u,a),r=!1,i()}}}function gt(n){let e,t=n[13]+"",o,l,r;return{c(){e=m("option"),o=B(t),h(e,"class","dark:bg-slate-900"),e.disabled=l=n[13]===ue.official&&L.platform!==Ce.Linux,e.__value=r=n[13],te(e,e.__value)},m(i,c){S(i,e,c),k(e,o)},p(i,c){c&1&&t!==(t=i[13]+"")&&re(o,t),c&1&&l!==(l=i[13]===ue.official&&L.platform!==Ce.Linux)&&(e.disabled=l),c&1&&r!==(r=i[13])&&(e.__value=r,te(e,e.__value))},d(i){i&&$(e)}}}function ht(n){let e;return{c(){e=m("option"),e.textContent="No characters",h(e,"class","dark:bg-slate-900"),e.disabled=!0,e.selected=!0,e.__value="No characters",te(e,e.__value)},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function Fn(n){let e;return{c(){e=B("New Character")},m(t,o){S(t,e,o)},p:H,d(t){t&&$(e)}}}function Wn(n){let e=n[10].displayName+"",t;return{c(){t=B(e)},m(o,l){S(o,t,l)},p(o,l){l&4&&e!==(e=o[10].displayName+"")&&re(t,e)},d(o){o&&$(t)}}}function mt(n){let e,t,o;function l(c,u){return c[10].displayName?Wn:Fn}let r=l(n),i=r(n);return{c(){e=m("option"),i.c(),t=P(),e.__value=o=n[10].accountId,te(e,e.__value),h(e,"class","dark:bg-slate-900")},m(c,u){S(c,e,u),i.m(e,null),k(e,t)},p(c,u){r===(r=l(c))&&i?i.p(c,u):(i.d(1),i=r(c),i&&(i.c(),i.m(e,t))),u&4&&o!==(o=c[10].accountId)&&(e.__value=o,te(e,e.__value))},d(c){c&&$(e),i.d()}}}function Vn(n){let e,t,o,l,r,i,c,u,a,d,f,g,_,p,y,v,R,T=L.hasBoltPlugins&&Gn(n);function N(b,O){if(b[0].selected_game==W.osrs)return Xn;if(b[0].selected_game===W.rs3)return Jn}let M=N(n),I=M&&M(n),D=oe(n[2]),C=[];for(let b=0;b<D.length;b+=1)C[b]=mt(pt(n,D,b));let w=null;return D.length||(w=ht()),{c(){T&&T.c(),e=P(),t=m("div"),o=m("img"),r=P(),i=m("button"),i.textContent="Play",c=P(),u=m("div"),I&&I.c(),a=P(),d=m("div"),f=m("label"),g=m("span"),g.textContent="Character",_=P(),p=m("select");for(let b=0;b<C.length;b+=1)C[b].c();w&&w.c(),Mt(o.src,l="svgs/rocket-solid.svg")||h(o,"src",l),h(o,"alt","Launch icon"),h(o,"class","mx-auto mb-5 w-24 rounded-3xl bg-gradient-to-br from-rose-500 to-violet-500 p-5"),h(i,"class","mx-auto mb-2 w-52 rounded-lg bg-emerald-500 p-2 font-bold text-black duration-200 hover:opacity-75"),h(u,"class","mx-auto my-2"),h(g,"class","text-sm"),h(p,"id","character_select"),h(p,"class","mx-auto w-52 cursor-pointer rounded-lg border-2 border-slate-300 bg-inherit p-2 text-inherit duration-200 hover:opacity-75 dark:border-slate-800"),n[0].selected_account_id===void 0&&_e(()=>n[9].call(p)),h(d,"class","mx-auto my-2"),h(t,"class","bg-grad flex h-full flex-col border-slate-300 p-5 duration-200 dark:border-slate-800")},m(b,O){T&&T.m(b,O),S(b,e,O),S(b,t,O),k(t,o),k(t,r),k(t,i),k(t,c),k(t,u),I&&I.m(u,null),k(t,a),k(t,d),k(d,f),k(f,g),k(f,_),k(f,p);for(let U=0;U<C.length;U+=1)C[U]&&C[U].m(p,null);w&&w.m(p,null),de(p,n[0].selected_account_id,!0),y=!0,v||(R=[E(i,"click",n[6]),E(p,"change",n[9])],v=!0)},p(b,[O]){if(L.hasBoltPlugins&&T.p(b,O),M===(M=N(b))&&I?I.p(b,O):(I&&I.d(1),I=M&&M(b),I&&(I.c(),I.m(u,null))),O&4){D=oe(b[2]);let U;for(U=0;U<D.length;U+=1){const X=pt(b,D,U);C[U]?C[U].p(X,O):(C[U]=mt(X),C[U].c(),C[U].m(p,null))}for(;U<C.length;U+=1)C[U].d(1);C.length=D.length,!D.length&&w?w.p(b,O):D.length?w&&(w.d(1),w=null):(w=ht(),w.c(),w.m(p,null))}O&1&&de(p,b[0].selected_account_id)},i(b){y||(j(T),y=!0)},o(b){A(T),y=!1},d(b){b&&($(e),$(t)),T&&T.d(b),I&&I.d(),Pe(C,b),w&&w.d(),v=!1,ee(R)}}}function zn(n,e,t){let o,l,r,{config:i}=q;le(n,i,_=>t(0,l=_));function c(_,p){if(!l.selected_user_id||!l.selected_account_id)return x.warn("Please log in to launch a client");const y=G.findSession(l.selected_user_id);if(!y)return x.warn("Unable to launch game, session was not found.");const{session_id:v}=y,R=G.findAccount(y.accounts,l.selected_account_id);if(!R)return x.warn("Unable to launch game, account was not found.");const{accountId:T,displayName:N}=R,M=L.platform===Ce.Windows,I=L.platform===Ce.Linux;switch(_){case W.osrs:switch(p){case ue.official:ot(M,!0,v,T,N);break;case ue.runelite:Pt(v,T,N,!1);break;case ue.hdos:sn(v,T,N);break}break;case W.rs3:I?nn(v,T,N):ot(M,!1,v,T,N);break}}function u(_){ce[_?"unshift":"push"](()=>{r=_,t(1,r)})}const a=()=>c(l.selected_game,l.selected_client);function d(){l.selected_client=Me(this),i.set(l)}const f=()=>{r.open()};function g(){l.selected_account_id=Me(this),i.set(l)}return n.$$.update=()=>{var _;n.$$.dirty&1&&t(2,o=((_=G.findSession(l.selected_user_id??""))==null?void 0:_.accounts)??[])},[l,r,o,i,c,u,a,d,f,g]}class Zn extends Q{constructor(e){super(),K(this,e,zn,Vn,Y,{})}}function bt(n,e,t){const o=n.slice();return o[1]=e[t].date,o[2]=e[t].severity,o[3]=e[t].content,o}function kt(n){var u;let e,t=((u=n[1])==null?void 0:u.toLocaleTimeString())+"",o,l,r=n[3]+"",i,c;return{c(){e=m("li"),o=B(t),l=B(`
				- `),i=B(r),c=P(),F(e,"text-rose-500",n[2]===Le.error),F(e,"text-orange-700",n[2]===Le.warn)},m(a,d){S(a,e,d),k(e,o),k(e,l),k(e,i),k(e,c)},p(a,d){var f;d&1&&t!==(t=((f=a[1])==null?void 0:f.toLocaleTimeString())+"")&&re(o,t),d&1&&r!==(r=a[3]+"")&&re(i,r),d&1&&F(e,"text-rose-500",a[2]===Le.error),d&1&&F(e,"text-orange-700",a[2]===Le.warn)},d(a){a&&$(e)}}}function Yn(n){let e,t,o,l,r=oe(n[0]),i=[];for(let c=0;c<r.length;c+=1)i[c]=kt(bt(n,r,c));return{c(){e=m("div"),t=m("div"),t.innerHTML='<img src="svgs/circle-info-solid.svg" alt="Message list icon" class="h-7 w-7 rounded-full bg-blue-500 p-[3px] duration-200"/>',o=P(),l=m("ol");for(let c=0;c<i.length;c+=1)i[c].c();h(t,"class","absolute right-6 top-2"),h(l,"id","message_list"),h(l,"class","h-full list-inside list-disc overflow-y-auto pl-5 pt-1 marker:text-blue-500"),h(e,"class","fixed bottom-0 h-1/4 w-screen border-t-2 border-t-slate-300 bg-slate-100 duration-200 dark:border-t-slate-800 dark:bg-slate-900")},m(c,u){S(c,e,u),k(e,t),k(e,o),k(e,l);for(let a=0;a<i.length;a+=1)i[a]&&i[a].m(l,null)},p(c,[u]){if(u&1){r=oe(c[0]);let a;for(a=0;a<r.length;a+=1){const d=bt(c,r,a);i[a]?i[a].p(d,u):(i[a]=kt(d),i[a].c(),i[a].m(l,null))}for(;a<i.length;a+=1)i[a].d(1);i.length=r.length}},i:H,o:H,d(c){c&&$(e),Pe(i,c)}}}function Kn(n,e,t){let{logs:o}=e;return n.$$set=l=>{"logs"in l&&t(0,o=l.logs)},[o]}class Qn extends Q{constructor(e){super(),K(this,e,Kn,Yn,Y,{logs:0})}}function es(n){let e,t,o,l;return{c(){e=m("div"),t=m("button"),t.innerHTML=`<div class="flex"><img src="svgs/database-solid.svg" alt="Browse app data" class="mr-2 h-7 w-7 rounded-lg bg-violet-500 p-1"/>
			Browse App Data</div>`,h(t,"id","data_dir_button"),h(t,"class","p-2 hover:opacity-75"),h(e,"id","general_options"),h(e,"class","col-span-3 p-5 pt-10")},m(r,i){S(r,e,i),k(e,t),o||(l=E(t,"click",n[1]),o=!0)},p:H,i:H,o:H,d(r){r&&$(e),o=!1,l()}}}function ts(n){function e(){var o=new XMLHttpRequest;o.open("GET","/browse-data"),o.onreadystatechange=()=>{o.readyState==4&&x.info(`Browse status: '${o.responseText.trim()}'`)},o.send()}return[e,()=>{e()}]}class ns extends Q{constructor(e){super(),K(this,e,ts,es,Y,{})}}function ss(n){let e,t,o,l,r,i,c,u,a,d,f,g,_,p,y,v,R,T,N;return{c(){e=m("div"),t=m("button"),o=m("div"),o.innerHTML=`<img src="svgs/wrench-solid.svg" alt="Configure RuneLite" class="mr-2 h-7 w-7 rounded-lg bg-pink-500 p-1"/>
			Configure RuneLite`,l=P(),r=m("div"),i=m("label"),i.textContent="Use custom RuneLite JAR:",c=P(),u=m("input"),a=P(),d=m("div"),f=m("textarea"),_=P(),p=m("br"),y=P(),v=m("button"),R=B("Select File"),h(o,"class","flex"),t.disabled=n[2],h(t,"class","p-2 pb-5 hover:opacity-75"),h(i,"for","use_custom_jar"),h(u,"type","checkbox"),h(u,"class","ml-2"),h(r,"class","mx-auto border-t-2 border-slate-300 p-2 pt-5 dark:border-slate-800"),h(f,"class","h-10 rounded border-2 border-slate-300 bg-slate-100 text-slate-950 dark:border-slate-800 dark:bg-slate-900 dark:text-slate-50"),f.disabled=g=!n[0].runelite_use_custom_jar,h(v,"class","mt-1 rounded-lg border-2 border-blue-500 p-1 duration-200 hover:opacity-75"),v.disabled=n[1],h(d,"class","mx-auto p-2"),F(d,"opacity-25",!n[0].runelite_use_custom_jar),h(e,"id","osrs_options"),h(e,"class","col-span-3 p-5 pt-10")},m(M,I){S(M,e,I),k(e,t),k(t,o),k(e,l),k(e,r),k(r,i),k(r,c),k(r,u),u.checked=n[0].runelite_use_custom_jar,k(e,a),k(e,d),k(d,f),te(f,n[0].runelite_custom_jar),k(d,_),k(d,p),k(d,y),k(d,v),k(v,R),T||(N=[E(t,"click",n[8]),E(u,"change",n[9]),E(f,"input",n[10]),E(v,"click",n[11])],T=!0)},p(M,[I]){I&4&&(t.disabled=M[2]),I&1&&(u.checked=M[0].runelite_use_custom_jar),I&1&&g!==(g=!M[0].runelite_use_custom_jar)&&(f.disabled=g),I&1&&te(f,M[0].runelite_custom_jar),I&2&&(v.disabled=M[1]),I&1&&F(d,"opacity-25",!M[0].runelite_use_custom_jar)},i:H,o:H,d(M){M&&$(e),T=!1,ee(N)}}}function os(n,e,t){let o,l,r,i;const{config:c}=q;le(n,c,y=>t(0,i=y));let u=!1;async function a(){t(1,u=!0),Ee(c,i.runelite_custom_jar=await G.openFilePicker(),i),console.log("done picking"),t(1,u=!1)}function d(){!(o!=null&&o.session_id)||!(l!=null&&l.accountId)||!(l!=null&&l.displayName)||Pt(o.session_id,l.accountId,l.displayName,!0)}const f=()=>d();function g(){i.runelite_use_custom_jar=this.checked,c.set(i)}function _(){i.runelite_custom_jar=this.value,c.set(i)}const p=()=>{a()};return n.$$.update=()=>{n.$$.dirty&1&&t(7,o=G.findSession(i.selected_user_id??"")),n.$$.dirty&129&&t(6,l=G.findAccount((o==null?void 0:o.accounts)??[],i.selected_account_id??"")),n.$$.dirty&192&&t(2,r=!(o!=null&&o.session_id&&(l!=null&&l.accountId)))},[i,u,r,c,a,d,l,o,f,g,_,p]}class ls extends Q{constructor(e){super(),K(this,e,os,ss,Y,{})}}function rs(n){let e,t,o,l,r,i;return{c(){e=m("div"),t=m("label"),t.textContent="Enable Bolt plugin loader:",o=P(),l=m("input"),h(t,"for","enable_plugins"),h(l,"type","checkbox"),h(l,"name","enable_plugins"),h(l,"id","enable_plugins"),h(l,"class","ml-2"),h(e,"class","mx-auto p-2")},m(c,u){S(c,e,u),k(e,t),k(e,o),k(e,l),l.checked=n[0].rs_plugin_loader,r||(i=E(l,"change",n[2]),r=!0)},p(c,u){u&1&&(l.checked=c[0].rs_plugin_loader)},d(c){c&&$(e),r=!1,i()}}}function is(n){let e,t,o,l,r,i,c,u,a,d,f,g,_=L.hasBoltPlugins&&rs(n);return{c(){e=m("div"),_&&_.c(),t=P(),o=m("div"),l=m("label"),l.textContent="Use custom config URI:",r=P(),i=m("input"),c=P(),u=m("div"),a=m("textarea"),h(l,"for","use_custom_uri"),h(i,"type","checkbox"),h(i,"class","ml-2"),h(o,"class","mx-auto p-2"),h(a,"class","rounded border-2 border-slate-300 bg-slate-100 text-slate-950 disabled:opacity-50 dark:border-slate-800 dark:bg-slate-900 dark:text-slate-50"),a.disabled=d=!n[0].use_custom_rs_config_uri,h(a,"rows","4"),h(a,"placeholder",L.env.default_config_uri),h(u,"class","p-2"),h(e,"id","rs3_options"),h(e,"class","col-span-3 p-5 pt-10")},m(p,y){S(p,e,y),_&&_.m(e,null),k(e,t),k(e,o),k(o,l),k(o,r),k(o,i),i.checked=n[0].use_custom_rs_config_uri,k(e,c),k(e,u),k(u,a),te(a,n[0].rs_config_uri),f||(g=[E(i,"change",n[3]),E(a,"input",n[4])],f=!0)},p(p,[y]){L.hasBoltPlugins&&_.p(p,y),y&1&&(i.checked=p[0].use_custom_rs_config_uri),y&1&&d!==(d=!p[0].use_custom_rs_config_uri)&&(a.disabled=d),y&1&&te(a,p[0].rs_config_uri)},i:H,o:H,d(p){p&&$(e),_&&_.d(),f=!1,ee(g)}}}function as(n,e,t){let o;const{config:l}=q;le(n,l,u=>t(0,o=u));function r(){o.rs_plugin_loader=this.checked,l.set(o)}function i(){o.use_custom_rs_config_uri=this.checked,l.set(o)}function c(){o.rs_config_uri=this.value,l.set(o)}return[o,l,r,i,c]}class cs extends Q{constructor(e){super(),K(this,e,as,is,Y,{})}}function us(n){let e,t;return e=new cs({}),{c(){Z(e.$$.fragment)},m(o,l){V(e,o,l),t=!0},i(o){t||(j(e.$$.fragment,o),t=!0)},o(o){A(e.$$.fragment,o),t=!1},d(o){z(e,o)}}}function ds(n){let e,t;return e=new ls({}),{c(){Z(e.$$.fragment)},m(o,l){V(e,o,l),t=!0},i(o){t||(j(e.$$.fragment,o),t=!0)},o(o){A(e.$$.fragment,o),t=!1},d(o){z(e,o)}}}function fs(n){let e,t;return e=new ns({}),{c(){Z(e.$$.fragment)},m(o,l){V(e,o,l),t=!0},i(o){t||(j(e.$$.fragment,o),t=!0)},o(o){A(e.$$.fragment,o),t=!1},d(o){z(e,o)}}}function ps(n){let e,t,o,l,r,i,c,u,a,d,f,g,_,p,y,v,R,T,N,M,I;const D=[fs,ds,us],C=[];function w(b,O){return b[1]==b[2].general?0:b[1]==b[2].osrs?1:b[1]==b[2].rs3?2:-1}return~(R=w(n))&&(T=C[R]=D[R](n)),{c(){e=m("div"),t=m("div"),o=m("button"),l=B("General"),i=m("br"),c=P(),u=m("button"),a=B("OSRS"),f=m("br"),g=P(),_=m("button"),p=B("RS3"),v=P(),T&&T.c(),h(o,"class",r=n[1]===n[2].general?me:be),h(u,"class",d=n[1]===n[2].osrs?me:be),h(_,"class",y=n[1]===n[2].rs3?me:be),h(t,"class","relative h-full border-r-2 border-slate-300 pt-10 dark:border-slate-800"),h(e,"class","grid h-full grid-cols-4")},m(b,O){S(b,e,O),k(e,t),k(t,o),k(o,l),k(t,i),k(t,c),k(t,u),k(u,a),k(t,f),k(t,g),k(t,_),k(_,p),k(e,v),~R&&C[R].m(e,null),N=!0,M||(I=[E(o,"click",n[4]),E(u,"click",n[5]),E(_,"click",n[6])],M=!0)},p(b,O){(!N||O&2&&r!==(r=b[1]===b[2].general?me:be))&&h(o,"class",r),(!N||O&2&&d!==(d=b[1]===b[2].osrs?me:be))&&h(u,"class",d),(!N||O&2&&y!==(y=b[1]===b[2].rs3?me:be))&&h(_,"class",y);let U=R;R=w(b),R!==U&&(T&&(Ie(),A(C[U],1,1,()=>{C[U]=null}),Oe()),~R?(T=C[R],T||(T=C[R]=D[R](b),T.c()),j(T,1),T.m(e,null)):T=null)},i(b){N||(j(T),N=!0)},o(b){A(T),N=!1},d(b){b&&$(e),~R&&C[R].d(),M=!1,ee(I)}}}function _s(n){let e,t,o={class:"h-3/4 w-3/4",$$slots:{default:[ps]},$$scope:{ctx:n}};return e=new et({props:o}),n[7](e),{c(){Z(e.$$.fragment)},m(l,r){V(e,l,r),t=!0},p(l,[r]){const i={};r&258&&(i.$$scope={dirty:r,ctx:l}),e.$set(i)},i(l){t||(j(e.$$.fragment,l),t=!0)},o(l){A(e.$$.fragment,l),t=!1},d(l){n[7](null),z(e,l)}}}let me="border-2 border-blue-500 bg-blue-500 hover:opacity-75 font-bold text-black duration-200 rounded-lg p-1 mx-auto my-1 w-3/4",be="border-2 border-blue-500 hover:opacity-75 duration-200 rounded-lg p-1 mx-auto my-1 w-3/4";function gs(n,e,t){let o;function l(){o.open()}var r=(f=>(f[f.general=0]="general",f[f.osrs=1]="osrs",f[f.rs3=2]="rs3",f))(r||{});let i=1;const c=()=>{t(1,i=r.general)},u=()=>{t(1,i=r.osrs)},a=()=>{t(1,i=r.rs3)};function d(f){ce[f?"unshift":"push"](()=>{o=f,t(0,o)})}return[o,i,r,l,c,u,a,d]}class hs extends Q{constructor(e){super(),K(this,e,gs,_s,Y,{open:3})}get open(){return this.$$.ctx[3]}}function ms(n,{callback:e,ignore:t=[]}){const o=l=>{const r=t.some(i=>i.contains(l.target));n&&!n.contains(l.target)&&!l.defaultPrevented&&!r&&e()};return document.addEventListener("click",o,!0),document.addEventListener("contextmenu",o,!0),{destroy(){document.removeEventListener("click",o,!0),document.removeEventListener("contextmenu",o,!0)}}}const bs=n=>({}),wt=n=>({});function yt(n){let e,t,o,l,r,i;const c=n[9].content,u=qe(c,n,n[8],wt);return{c(){e=m("div"),u&&u.c(),h(e,"class",t="dropdown-color absolute z-20 rounded-lg border-2 "+n[1]+" "+n[2]+" svelte-xifudk")},m(a,d){S(a,e,d),u&&u.m(e,null),l=!0,r||(i=At(o=ms.call(null,e,{callback:n[3],ignore:[n[5]]})),r=!0)},p(a,d){u&&u.p&&(!l||d&256)&&Be(u,c,a,a[8],l?De(c,a[8],d,bs):Ge(a[8]),wt),(!l||d&6&&t!==(t="dropdown-color absolute z-20 rounded-lg border-2 "+a[1]+" "+a[2]+" svelte-xifudk"))&&h(e,"class",t),o&&Ae(o.update)&&d&32&&o.update.call(null,{callback:a[3],ignore:[a[5]]})},i(a){l||(j(u,a),l=!0)},o(a){A(u,a),l=!1},d(a){a&&$(e),u&&u.d(a),r=!1,i()}}}function ks(n){let e,t,o,l,r,i,c;const u=n[9].default,a=qe(u,n,n[8],null);let d=n[4]&&yt(n);return{c(){e=m("div"),t=m("button"),a&&a.c(),o=P(),d&&d.c(),h(e,"class",l="relative h-fit w-fit "+n[0]+" svelte-xifudk")},m(f,g){S(f,e,g),k(e,t),a&&a.m(t,null),n[10](t),k(e,o),d&&d.m(e,null),r=!0,i||(c=E(t,"click",n[6]),i=!0)},p(f,[g]){a&&a.p&&(!r||g&256)&&Be(a,u,f,f[8],r?De(u,f[8],g,null):Ge(f[8]),null),f[4]?d?(d.p(f,g),g&16&&j(d,1)):(d=yt(f),d.c(),j(d,1),d.m(e,null)):d&&(Ie(),A(d,1,1,()=>{d=null}),Oe()),(!r||g&1&&l!==(l="relative h-fit w-fit "+f[0]+" svelte-xifudk"))&&h(e,"class",l)},i(f){r||(j(a,f),j(d),r=!0)},o(f){A(a,f),A(d),r=!1},d(f){f&&$(e),a&&a.d(f),n[10](null),d&&d.d(),i=!1,c()}}}function ws(n,e,t){let{$$slots:o={},$$scope:l}=e,{class:r=""}=e,{position:i="bottom"}=e,{align:c="start"}=e,u=!1,a;function d(){t(4,u=!0)}function f(){t(4,u=!1)}function g(){u?f():d()}function _(p){ce[p?"unshift":"push"](()=>{a=p,t(5,a)})}return n.$$set=p=>{"class"in p&&t(0,r=p.class),"position"in p&&t(1,i=p.position),"align"in p&&t(2,c=p.align),"$$scope"in p&&t(8,l=p.$$scope)},[r,i,c,f,u,a,g,d,l,o,_]}class ys extends Q{constructor(e){super(),K(this,e,ws,ks,Y,{class:0,position:1,align:2,open:7,close:3})}get open(){return this.$$.ctx[7]}get close(){return this.$$.ctx[3]}}function vt(n,e,t){const o=n.slice();return o[7]=e[t],o}function $t(n,e){let t,o=e[7].user.displayName+"",l,r,i;return{key:n,first:null,c(){t=m("option"),l=B(o),t.selected=r=e[7].user.userId===e[0].selected_user_id,t.__value=i=e[7].user.userId,te(t,t.__value),h(t,"class","dark:bg-slate-900"),this.first=t},m(c,u){S(c,t,u),k(t,l)},p(c,u){e=c,u&2&&o!==(o=e[7].user.displayName+"")&&re(l,o),u&3&&r!==(r=e[7].user.userId===e[0].selected_user_id)&&(t.selected=r),u&2&&i!==(i=e[7].user.userId)&&(t.__value=i,te(t,t.__value))},d(c){c&&$(t)}}}function vs(n){let e,t=[],o=new Map,l,r,i,c,u,a,d,f,g,_=oe(n[1]);const p=y=>y[7].user.userId;for(let y=0;y<_.length;y+=1){let v=vt(n,_,y),R=p(v);o.set(R,t[y]=$t(R,v))}return{c(){e=m("select");for(let y=0;y<t.length;y+=1)t[y].c();l=P(),r=m("div"),i=m("button"),i.textContent="Log In",c=P(),u=m("button"),a=B("Log Out"),h(e,"class","w-full cursor-pointer rounded-lg border-2 border-inherit bg-inherit p-2 text-center"),n[0].selected_user_id===void 0&&_e(()=>n[4].call(e)),h(i,"class","mx-auto mr-2 rounded-lg bg-blue-500 p-2 font-bold text-black duration-200 hover:opacity-75"),h(u,"class","mx-auto rounded-lg border-2 border-blue-500 p-2 font-bold duration-200 hover:opacity-75"),u.disabled=d=!n[0].selected_user_id,h(r,"class","mt-5 flex")},m(y,v){S(y,e,v);for(let R=0;R<t.length;R+=1)t[R]&&t[R].m(e,null);de(e,n[0].selected_user_id,!0),S(y,l,v),S(y,r,v),k(r,i),k(r,c),k(r,u),k(u,a),f||(g=[E(e,"change",n[4]),E(i,"click",n[5]),E(u,"click",n[6])],f=!0)},p(y,[v]){v&3&&(_=oe(y[1]),t=zt(t,v,p,1,y,_,o,e,Vt,$t,null,vt)),v&3&&de(e,y[0].selected_user_id),v&3&&d!==(d=!y[0].selected_user_id)&&(u.disabled=d)},i:H,o:H,d(y){y&&($(e),$(l),$(r));for(let v=0;v<t.length;v+=1)t[v].d();f=!1,ee(g)}}}function $s(n,e,t){let o,l;const{sessions:r,config:i}=q;le(n,r,d=>t(1,l=d)),le(n,i,d=>t(0,o=d));function c(){o.selected_user_id=Me(this),i.set(o)}return[o,l,r,i,c,()=>{const{origin:d,redirect:f,clientid:g}=L.env;ne.openLoginWindow(d,f,g)},()=>{o.selected_user_id&&G.logout(o.selected_user_id)}]}class Ss extends Q{constructor(e){super(),K(this,e,$s,vs,Y,{})}}function Ls(n){const e=n.slice(),t=G.findSession(e[1].selected_user_id??"");return e[11]=t,e}function Cs(n){let e,t,o;return{c(){e=m("button"),e.textContent="Login",h(e,"class","h-11 w-48 rounded-lg border-2 border-slate-300 bg-inherit p-2 text-center font-bold text-black duration-200 hover:opacity-75 dark:border-slate-800 dark:text-slate-50")},m(l,r){S(l,e,r),t||(o=E(e,"click",n[10]),t=!0)},p:H,i:H,o:H,d(l){l&&$(e),t=!1,o()}}}function Rs(n){let e,t;return e=new ys({props:{align:"center",$$slots:{content:[xs],default:[Ts]},$$scope:{ctx:n}}}),{c(){Z(e.$$.fragment)},m(o,l){V(e,o,l),t=!0},p(o,l){const r={};l&4098&&(r.$$scope={dirty:l,ctx:o}),e.$set(r)},i(o){t||(j(e.$$.fragment,o),t=!0)},o(o){A(e.$$.fragment,o),t=!1},d(o){z(e,o)}}}function Ts(n){var l;let e,t=(((l=n[11])==null?void 0:l.user.displayName)??"No user selected")+"",o;return{c(){e=m("button"),o=B(t),h(e,"class","h-11 w-48 rounded-lg border-2 border-slate-300 bg-inherit text-center font-bold text-black duration-200 hover:opacity-75 dark:border-slate-800 dark:text-slate-50")},m(r,i){S(r,e,i),k(e,o)},p(r,i){var c;i&2&&t!==(t=(((c=r[11])==null?void 0:c.user.displayName)??"No user selected")+"")&&re(o,t)},d(r){r&&$(e)}}}function xs(n){let e,t,o;return t=new Ss({}),{c(){e=m("div"),Z(t.$$.fragment),h(e,"slot","content"),h(e,"class","w-40")},m(l,r){S(l,e,r),V(t,e,null),o=!0},p:H,i(l){o||(j(t.$$.fragment,l),o=!0)},o(l){A(t.$$.fragment,l),o=!1},d(l){l&&$(e),z(t)}}}function Ps(n){let e,t,o,l,r,i,c,u,a,d,f,g,_,p,y,v,R,T,N={};e=new hs({props:N}),n[5](e);const M=[Rs,Cs],I=[];function D(w,b){return w[2].length>0?0:1}function C(w,b){return b===0?Ls(w):w}return p=D(n),y=I[p]=M[p](C(n,p)),{c(){Z(e.$$.fragment),t=P(),o=m("div"),l=m("div"),r=m("button"),r.textContent="RS3",i=P(),c=m("button"),c.textContent="OSRS",u=P(),a=m("div"),d=m("button"),d.innerHTML='<img src="svgs/lightbulb-solid.svg" class="m-auto h-6 w-6" alt="Change Theme"/>',f=P(),g=m("button"),g.innerHTML='<img src="svgs/gear-solid.svg" class="m-auto h-6 w-6" alt="Settings"/>',_=P(),y.c(),h(r,"class","mx-1 w-20 rounded-lg border-2 border-blue-500 p-2 duration-200 hover:opacity-75"),F(r,"text-black",n[1].selected_game===W.rs3),F(r,"bg-blue-500",n[1].selected_game===W.rs3),h(c,"class","mx-1 w-20 rounded-lg border-2 border-blue-500 bg-blue-500 p-2 text-black duration-200 hover:opacity-75"),F(c,"text-black",n[1].selected_game===W.osrs),F(c,"bg-blue-500",n[1].selected_game===W.osrs),h(l,"class","m-3 ml-9 font-bold"),h(d,"class","h-10 w-10 rounded-full bg-blue-500 text-center duration-200 hover:rotate-45 hover:opacity-75"),h(g,"class","h-10 w-10 rounded-full bg-blue-500 text-center duration-200 hover:rotate-45 hover:opacity-75"),h(a,"class","m-2 ml-auto flex gap-2"),h(o,"class","fixed top-0 flex h-16 w-screen border-b-2 border-slate-300 bg-slate-100 duration-200 dark:border-slate-800 dark:bg-slate-900")},m(w,b){V(e,w,b),S(w,t,b),S(w,o,b),k(o,l),k(l,r),k(l,i),k(l,c),k(o,u),k(o,a),k(a,d),k(a,f),k(a,g),k(a,_),I[p].m(a,null),v=!0,R||(T=[E(r,"click",n[6]),E(c,"click",n[7]),E(d,"click",n[8]),E(g,"click",n[9])],R=!0)},p(w,[b]){const O={};e.$set(O),(!v||b&2)&&F(r,"text-black",w[1].selected_game===W.rs3),(!v||b&2)&&F(r,"bg-blue-500",w[1].selected_game===W.rs3),(!v||b&2)&&F(c,"text-black",w[1].selected_game===W.osrs),(!v||b&2)&&F(c,"bg-blue-500",w[1].selected_game===W.osrs);let U=p;p=D(w),p===U?I[p].p(C(w,p),b):(Ie(),A(I[U],1,1,()=>{I[U]=null}),Oe(),y=I[p],y?y.p(C(w,p),b):(y=I[p]=M[p](C(w,p)),y.c()),j(y,1),y.m(a,null))},i(w){v||(j(e.$$.fragment,w),j(y),v=!0)},o(w){A(e.$$.fragment,w),A(y),v=!1},d(w){w&&($(t),$(o)),n[5](null),z(e,w),I[p].d(),R=!1,ee(T)}}}function Is(n,e,t){let o,l;const{config:r,sessions:i}=q;le(n,r,p=>t(1,o=p)),le(n,i,p=>t(2,l=p));let c;function u(p){ce[p?"unshift":"push"](()=>{c=p,t(0,c)})}return[c,o,l,r,i,u,()=>{Ee(r,o.selected_game=W.rs3,o)},()=>{Ee(r,o.selected_game=W.osrs,o)},()=>Ee(r,o.use_dark_theme=!o.use_dark_theme,o),()=>c.open(),()=>{const{origin:p,redirect:y,clientid:v}=L.env;ne.openLoginWindow(p,y,v)}]}class Os extends Q{constructor(e){super(),K(this,e,Is,Ps,Y,{})}}function Hs(n){let e,t,o,l,r,i,c,u,a,d,f,g,_;return e=new mn({}),o=new Os({}),u=new Zn({}),g=new Qn({props:{logs:n[0]}}),{c(){Z(e.$$.fragment),t=P(),Z(o.$$.fragment),l=P(),r=m("div"),i=m("div"),c=P(),Z(u.$$.fragment),a=P(),d=m("div"),f=P(),Z(g.$$.fragment),h(r,"class","mt-16 grid h-full grid-flow-col grid-cols-3")},m(p,y){V(e,p,y),S(p,t,y),V(o,p,y),S(p,l,y),S(p,r,y),k(r,i),k(r,c),V(u,r,null),k(r,a),k(r,d),S(p,f,y),V(g,p,y),_=!0},p(p,y){const v={};y&1&&(v.logs=p[0]),g.$set(v)},i(p){_||(j(e.$$.fragment,p),j(o.$$.fragment,p),j(u.$$.fragment,p),j(g.$$.fragment,p),_=!0)},o(p){A(e.$$.fragment,p),A(o.$$.fragment,p),A(u.$$.fragment,p),A(g.$$.fragment,p),_=!1},d(p){p&&($(t),$(l),$(r),$(f)),z(e,p),z(o,p),z(u),z(g,p)}}}function Us(n){let e,t,o,l;return e=new Ot({props:{$$slots:{default:[Hs]},$$scope:{ctx:n}}}),{c(){Z(e.$$.fragment)},m(r,i){V(e,r,i),t=!0,o||(l=E(window,"beforeunload",n[2]),o=!0)},p(r,[i]){const c={};i&9&&(c.$$scope={dirty:i,ctx:r}),e.$set(c)},i(r){t||(j(e.$$.fragment,r),t=!0)},o(r){A(e.$$.fragment,r),t=!1},d(r){z(e,r),o=!1,l()}}}function Es(n,e,t){let o;const l=x.logs;return le(n,l,i=>t(0,o=i)),[o,l,()=>G.saveConfig()]}class Ns extends Q{constructor(e){super(),K(this,e,Es,Us,Y,{})}}const St={target:document.getElementById("app")};window.opener||window.location.search.includes("&id_token")?new dn(St):(Ms(),new Ns(St));async function Ms(){js(),await qs(),tn(),As()}function js(){const n=new URLSearchParams(window.location.search);L.platform=n.get("platform"),L.isFlathub=n.get("flathub")==="1",L.rs3DebInstalledHash=n.get("rs3_deb_installed_hash"),L.rs3ExeInstalledHash=n.get("rs3_exe_installed_hash"),L.rs3AppInstalledHash=n.get("rs3_app_installed_hash"),L.osrsExeInstalledHash=n.get("osrs_exe_installed_hash"),L.osrsAppInstalledHash=n.get("osrs_app_installed_hash"),L.runeLiteInstalledId=n.get("runelite_installed_id"),L.hdosInstalledVersion=n.get("hdos_installed_version");const e=n.get("plugins");if(L.hasBoltPlugins=e!==null,e!==null)try{L.pluginList=JSON.parse(e)}catch{x.error("Unable to parse plugin list")}const t=n.get("credentials");if(t)try{const o=JSON.parse(t),l=o.every(r=>typeof r.session_id=="string"&&typeof r.tokens=="object"&&typeof r.accounts=="object"&&typeof r.user=="object");l?q.sessions.set(o):(q.sessions.set([]),G.saveCredentials(),x.warn("Credentials saved on disk are out of date. Please sign in again.")),q.sessions.set(l?o:[])}catch{q.sessions.set([]),G.saveCredentials(),x.error("Unable to parse saved credentials. Please sign in again.")}}function As(){const{origin:n,origin_2fa:e}=L.env,t=[L.internalUrl,n,e];let o=null;window.addEventListener("message",async l=>{var r;if(!t.includes(l.origin)){x.info(`discarding window message from origin ${l.origin}`);return}switch(l.data.type){case"authTokenUpdate":{o=l.data.tokens;break}case"authSessionUpdate":{if(o===null)return x.error("auth is null. Please try again.");const i=l.data.sessionId,c=await Re.buildSession(o,i),{config:u,sessions:a}=q;c.ok?(a.update(d=>(d.push(c.value),d)),se(u).selected_user_id||Qe(),G.saveCredentials(),x.info(`Successfully added account '${c.value.user.displayName}'`)):x.error(`Unable to sign into account. ${c.error}`),ne.pendingLoginWindow=null,o=null;break}case"authFailed":{x.error(`Unable to authenticate: ${l.data.reason}`),ne.pendingLoginWindow=null,o=null;break}case"externalUrl":{const i=new XMLHttpRequest;i.onreadystatechange=()=>{i.readyState==4&&x.info(`External URL status: '${i.responseText.trim()}'`)},i.open("POST","/open-external-url",!0),i.send(l.data.url);break}case"gameClientListUpdate":Ze.set(It());break;default:{const i=((r=l.data)==null?void 0:r.type)??"no type provided";x.info(`Unknown message type: ${i}`);break}}})}async function qs(){const n=se(q.sessions),e=[];for(const t of n){const o=await ne.refreshOAuthToken(t.tokens);if(!o.ok){o.error===0?x.error(`Unable to verify saved login, status: ${o.error}. Do you have an internet connection? Please relaunch Bolt to try again.`):(x.error(`Discarding expired login, status: ${o.error}. Please sign in again.`),e.push(t.tokens.sub));continue}const l=o.value;t.tokens=l;const r=await Re.buildSession(l,t.session_id);r.ok?(G.findSession(l.sub)||(t.user=r.value.user,t.accounts=r.value.accounts),x.info(`Logged into account '${r.value.user.displayName}'`)):(x.error(`Unable to login to account '${t.user.displayName}'. ${r.error}`),e.push(t.tokens.sub))}e.forEach(t=>{G.logout(t)}),q.sessions.set(n),G.saveCredentials()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
